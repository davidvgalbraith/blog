After my uproarious success fixing Node.js, I was ready to fix something else. I checked out the open issues on Node, but I didn't see any that I'd be able to jump on. So I turned my attention elsewhere. Another technology I have a fair amount of experience with is Elasticsearch - I wrote the Juttle Elastic Adapter, after all. 

Elasticsearch

Elasticsearch is a search engine for JSON documents. The user provides it a set of JSON objects to store, and it creates a data structure called the "inverted index" that describes the documents and enables flexible analysis. The inverted index is basically a map that, for each key in the data set, maps each value for that key to the list of documents where that key has that value. Here's an example: let's say we have the two JSON objects: 

{"group": "fellowship", "name": "Frodo", "task": "ringbearer", "document_id": 1}
{"group": "fellowship", "name": "Gandalf", "task": "wizard", "document_id": 2}

The "document_id" field has to be unique across all the objects you store in Elasticsearch. Elasticsearch can generate document IDs for you. Then the inverted index for these two would look like this:

{
    "group": {
        "fellowship": [1, 2]
    },
    "name": {
        "Frodo": [1],
        "Gandalf": [2]
    },
    "task": {
        "ringbearer": [1],
        "wizard": [2]
    }
}

With a data structure like that, Elasticsearch can quickly answer queries like "give me all the documents where group = 'fellowship'". Each top-level key ("group", "name", and "task" in our example) is referred to as a "mapping". By default, Elasticsearch will add mappings to the inverted index as necessary when new documents are stored: for instance, if I add {"name": "Boromir", "hometown": "Minas Tirith", "document_id": 3} to my sample data set, then the mapping for "hometown" will be added to the inverted index. But if you put "index.mapper.dynamic: false" in Elasticsearch's configuration file, that disables dynamic mapping creation. This means that if I try to index my Boromir document in an Elasticsearch instance with this setting, Elasticsearch will reject it. In order to store any objects with keys that haven't been seen in previous keys, I'd have to manually explicitly add the mapping beforehand. Once upon a time, Jut was going to add a bunch of extra type checking before storing documents in Elasticsearch, so we were going to actually use this setting in production. We didn't end up implementing that idea, but I gained enough experience with the index.mapper.dynamic setting to know what it is for and why it is useful.

The Bug

However, as I found in (link), Elasticsearch was ignoring index.mapper.dynamic in one scenario. The top level of organization in Elasticsearch is the "index". An index is like an SQL table. Each index has an inverted index like the one I described above. When storing a document, you tell Elasticsearch what index to store that document in. If the specified index doesn't already exist, Elasticsearch will create it for you. A newly-created index has no mapping, so a mapping has to be created for the index to store any documents. Ordinarily, Elasticsearch dynamically creates the mapping. If dynamic mapping is disabled, though, it shouldn't be doing that. But it did anyway! Even with dynamic mapping disabled, Elasticsearch was creating dynamic mappings for newly-created indices. Basically, Elasticsearch was broken. I figured I'd take a crack at fixing it.

The Fix

I had done some cursory investigations into the internals of Elasticsearch for Jut, but most of the codebase was still a mystery. I started my search by searching the code for the string "index.mapper.dynamic". I figured I'd see the sites where the setting was being used, so I could plug it into the places where it needed to be. I found just one reference to it outside of tests, in MapperService.java. The MapperService is the class that handles creation and maintenance of mappings, so it made sense for it to have a reference to index.mapper.dynamic. MapperService uses the value of index.mapper.dynamic in its method documentMapperWithAutoCreate, which throws an exception if dynamic mapping is disabled. 

Continuing to look around MapperService.java, I found that the real work of creating the mapping is done in its merge method. So if there were a code path that called MapperService.merge without calling documentMapperWithAutoCreate, then that would create a mapping without ever checking the value of index.mapper.dynamic. So I searched the code for all the calls to MapperService.merge, and the one that stuck out to me was in MetadataCreateIndexService.java. Creating indexes! That was exactly where the bug was, so I figured I was onto something. I added a method to MapperService that I called checkIfAddMappingAllowed, which just threw an error if dynamic mapping was disabled. Prior to MetadataCreateIndexService's call to MapperService.merge, I added a call to MapperService.checkIfAddMappingAllowed. Lo and behold, when I tried to create an index with dynamic mappings after this change, I received an appropriate exception. Enthused, I added an automatic test, assembled the changes into a pull request and awaited the community's feedback.

The Fix for the Fix

Two days later, the reviews were in -- my change was a disaster! It turned out that the method I'd added the extra check to was called both during dynamic index creation and during explicit index creation. So if index.mapper.dynamic were set to true with my change, it would be impossible to create any indices. Basically, I went a step too far: to keep Elasticsearch from creating indices in the case where I didn't want it to, I'd prevented it from creating indices at all. Oops. The reviewers helpfully pointed me in the direction of where I ought to put the change, a class called TransportIndexAction.java.
